syntax = "proto2";

package CGGame;

/// @brief the main protocol message, we should parse out protoCode first,
///             and then if possible, use other Message to parse out protoBody
message ProtoInfo {
    optional int32  mainType    = 1;
    optional int32  subType     = 2;
    optional bytes  msgBody     = 3;
}

/// protoTypes.CGGAME_PROTO_SUBTYPE_MULTIPLE     =   1
message MultiBody {
    optional int32  curIndex  = 1;
    optional int32  maxIndex  = 2;
    optional bytes  msgBody   = 3;
}

/// protoTypes.CGGAME_PROTO_SUBTYPE_ACL          =   2
message AclInfo {
    optional int32 aclType = 1;
    optional bytes aclMsg  = 2;
}

/// protoTypes.CGGAME_PROTO_SUBTYPE_HEARTBEAT    =   3
message HeartBeat {
    optional int32  fromType    = 1;
    optional double timestamp   = 2;
}

/// protoTypes.CGGAME_PROTO_SUBTYPE_AGENTLIST    =   4
message AgentList {
    message OneAgent {
        optional bytes  name        = 1;
        optional bytes  addr        = 2;
        optional int32  port        = 3;
        optional int32  numPlayers  = 4;
    }

    repeated OneAgent agents    = 1;
}

/// protoTypes.CGGAME_PROTO_SUBTYPE_NOTICE       =   5
message NoticeInfo {
    optional int32 noticeType   = 1;   // 0, text, 1 app voice, amr-wb, 2,
    optional bytes noticeText   = 2;
}

/// protoTypes.CGGAME_PROTO_MAINTYPE_AUTH    = 10
message AuthInfo {
    optional bytes username     = 1;
    optional bytes password     = 2;
    optional bytes challenge    = 3;
    optional bytes clientkey    = 4;
    optional bytes serverkey    = 5;
    optional bytes hmac         = 6;
    optional bytes etoken       = 7;
    optional int32 authIndex    = 8;
}

/// protoTypes.CGGAME_PROTO_SUBTYPE_HALLJOIN
message HallInfo {
    optional int32 gameId         = 1;
    optional int32 gameVersion    = 2;
    optional int32 gameMode       = 3;
}

/// protoTypes.CGGAME_PROTO_SUBTYPE_USERINFO
message UserInfo {
    repeated bytes fieldNames  = 1;

    optional bytes FUniqueID   = 2;    // uid
    optional bytes FPassword   = 3;
    optional bytes FNickName   = 4;
    optional bytes FOSType     = 5;    // iPhone, iPad, Mac, Win, Linux, Android,

    optional bytes FMobile     = 6;
    optional bytes FIDCard     = 7;
    optional bytes FEmail      = 8;
    optional bytes FRegTime    = 9;

    optional bytes FLastIP          = 10;
    optional bytes FLastLoginTime   = 11;
    optional int32 FTotalTime       = 12;

    optional int32 FAvatarID   = 13;        // avatar 3
    optional bytes FAvatarUrl  = 14;        // avatar 1
    optional bytes FAvatarData = 15;        // avatar 2

    optional bytes  FLocation   = 16;
    optional double FLongitude  = 17;
    optional double FLatitude   = 18;
    optional double FAltitude   = 19;

    optional double FNetSpeed   = 20;
}

/// protoTypes.CGGAME_PROTO_SUBTYPE_GAMEJOIN
message GameInfo {
    optional int32 roomId = 1;
    optional int32 seatId = 2;
}

message WaitUserInfo {
    optional int32 tableStatus  = 1;
    optional int32 timeout      = 2;
    optional int32 waitMask     = 3;
}


